# AI 뉴스 캐스트 프로젝트 - 빅카인드 뉴스 추출 

## 프로젝트 개요
빅카인드(bigkinds.or.kr) 웹사이트에서 실시간 트렌딩 뉴스 주제를 추출하여 AI 뉴스 캐스트 생성에 활용하는 프로젝트입니다.

## 주요 기능
- 빅카인드 메인 페이지에서 오늘의 주요 뉴스 주제 추출
- 주제별 상세 정보 및 메타데이터 수집
- 구조화된 JSON 형태로 데이터 저장
- 타임스탬프 기반 폴더 구조로 데이터 관리

## 핵심 파일 구조
```
tests/claude-code/
├── bigkinds_topic_list.py          # 주제 목록 추출 스크립트
├── get_news_list.py               # 뉴스 목록 추출 스크립트
├── get_news_details.py             # 개별 뉴스 상세 추출 스크립트
├── consolidate-news.ts             # 뉴스 통합 및 정리 스크립트 (TypeScript)
├── generate-newscast-script.ts    # 뉴스캐스트 스크립트 생성 (TypeScript)
├── generate-newscast-audio.ts     # 개별 대사 라인 TTS 음성 생성 (TypeScript)
├── merge-newscast-audio.ts        # 개별 음성 파일 병합하여 완성된 오디오 생성 (TypeScript)
├── tts-voices.json                 # Google TTS Chirp 음성 모델 관리
├── package.json                    # Node.js 프로젝트 설정
├── tsconfig.json                   # TypeScript 설정
└── bigkinds/{ISO_DATETIME}/        # 추출 결과 폴더
    ├── topic-list.json             # 주제 목록 구조화 데이터
    ├── topic-01/                   # 1순위 주제 폴더
    │   ├── news-list.json          # 뉴스 목록 구조화 데이터
    │   ├── news/                   # 개별 뉴스 상세 정보 폴더
    │   │   ├── {news-id}.json      # 개별 뉴스 상세 정보
    │   │   └── ...                 # 기타 뉴스 파일들
    │   ├── news.json               # 통합 뉴스 파일 (AI 정리)
    │   ├── news.txt                # 통합 뉴스 텍스트 파일
    │   ├── newscast-script.json    # 뉴스캐스트 스크립트 (구조화)
    │   ├── newscast-script.txt     # 뉴스캐스트 스크립트 (읽기용)
    │   ├── audio/                  # TTS 생성 음성 파일 폴더
    │   │   ├── 001-김민준.mp3       # 개별 대사 라인 음성 파일들
    │   │   ├── 002-이서연.mp3
    │   │   ├── ...
    │   │   └── audio-files.json    # 오디오 파일 목록 및 메타데이터
    │   ├── newscast-{timestamp}-all.mp3  # 완성된 뉴스캐스트 오디오
    │   └── newscast-audio-info.json      # 최종 오디오 파일 정보
    ├── topic-02/                   # 2순위 주제 폴더
    │   └── news-list.json
    └── topic-{N}/                  # N순위 주제 폴더 (최대 10개)
        └── news-list.json
```

## 추출 데이터 구조
### 메타데이터
- `extraction_date`: 한국어 날짜 ("2025년 06월 20일 (금)")
- `extraction_timestamp`: ISO 형식 타임스탬프
- `total_topics`: 추출된 주제 총 개수

### 주제별 데이터 (topic-list.json)
- `rank`: 주제 순위 (1, 2, 3...)
- `topic`: 뉴스 주제 제목
- `summary`: 상세 요약 (hidden input에서 추출)
- `keywords`: 관련 키워드 배열
- `news_count`: 관련 뉴스 기사 수
- `news_ids`: 개별 뉴스 기사 ID 배열
- `issue_name`: 이슈 명칭

### 뉴스 목록 데이터 (news-list.json)
- `topic`: 주제 제목
- `extraction_timestamp`: 추출 시간
- `total_news`: 총 뉴스 개수
- `news_list`: 뉴스 목록 배열
  - `news_id`: 뉴스 고유 ID
  - `title`: 뉴스 제목
  - `provider_name`: 언론사명
  - `byline`: 기자명
  - `published_date`: 발행일
  - `summary`: 뉴스 요약
  - `keywords`: 관련 키워드 배열
  - `category`: 뉴스 카테고리
  - `url`: 뉴스 URL

### 개별 뉴스 상세 데이터 ({news-id}.json)
- `extraction_timestamp`: 추출 시간
- `news_detail`: 빅카인드 API 원본 응답 데이터
  - `TITLE`: 뉴스 제목
  - `CONTENT`: 뉴스 본문
  - `BYLINE`: 기자명
  - `PROVIDER`: 언론사
  - `DATE`: 발행일
  - `CATEGORY`: 뉴스 카테고리
  - `TMS_*`: 텍스트 마이닝 분석 결과
- `content`: 뉴스 본문 (추출된 텍스트)
- `metadata`: 정리된 메타데이터
  - `title`: 뉴스 제목
  - `provider`: 언론사
  - `byline`: 기자명
  - `category`: 카테고리
  - 기타 정보

## 기술적 구현 사항

### 웹 스크래핑
**주제 목록 추출 (bigkinds_topic_list.py)**
- `requests` + `lxml.etree`를 사용한 HTML 파싱
- XPath 선택자: `//a[@class="issupop-btn"]`
- SSL 검증 비활성화 (`verify=False`)

**뉴스 목록 추출 (get_news_list.py)**
- POST 요청을 통한 뉴스 목록 API 호출
- 엔드포인트: `/news/getNetworkDataAnalysis.do`
- 주제별 뉴스 클러스터 ID를 통한 관련 뉴스 검색

**개별 뉴스 상세 추출 (get_news_details.py)**
- GET 요청을 통한 개별 뉴스 상세 API 호출
- 엔드포인트: `/news/detailView.do`
- 뉴스 ID 형식 변환: 하이픈(-) → 점(.) 형태로 API 호출
- 전체 파이프라인 자동 실행 기능 제공

### 한국어 인코딩 처리
**중요**: 한국어 텍스트 올바른 처리를 위해 반드시 다음 방법 사용:
```python
# ✅ 올바른 방법
root = etree.HTML(response.text)  # Unicode 문자열 사용

# ❌ 잘못된 방법  
root = etree.HTML(response.content)  # raw bytes 사용 시 한글 깨짐
```

### HTML 엔티티 처리
```python
import html
# HTML 엔티티 (&#039;, &amp; 등)를 실제 문자로 변환
text = html.unescape(raw_text)
```

### 데이터 추출 핵심 로직
```python
# 주제 버튼에서 기본 정보 추출
topic_text = button.get("data-topic", "")
news_ids_str = button.get("data-news-ids", "")
issue_name = button.get("data-issue-name", "")

# 부모 li 요소에서 추가 정보 추출
li_parent = button.xpath('./ancestor::li')[0]
rank_elem = li_parent.xpath('.//span[@class="rank"]')
news_count_elem = li_parent.xpath('.//span[@class="newsNo"]')
summary_elem = li_parent.xpath('.//input[@type="hidden"]')
```

## 코딩 가이드라인

### 파일 명명 규칙
- 폴더: `bigkinds-{ISO_DATETIME}`
- HTML: `topic-list.html`  
- JSON: `topic-list.json`

### JSON 저장 설정
```python
# JSON 파일 저장 (한국어 지원)
json.dump(data, f, ensure_ascii=False, indent=2)

# 뉴스 ID 형식 변환 (API 호출용)
api_news_id = news_id.replace('-', '.')  # 04100958-20250620... → 04100958.20250620...
```

### 에러 처리
- HTTP 요청: `response.raise_for_status()`
- 데이터 파싱: 각 요소 존재 여부 확인 후 처리
- 인코딩: try-except 블록으로 fallback 처리

### 디렉토리 구조
- 타임스탬프 기반 폴더 생성으로 데이터 버전 관리
- 원본 HTML과 추출 데이터 분리 저장
- `os.makedirs(folder_name, exist_ok=True)` 사용

## 뉴스 통합 시스템 (TypeScript)

### 설정 및 환경
- **Node.js 24**: 네이티브 TypeScript 지원 (`--experimental-transform-types`)
- **ES 모듈**: `"type": "module"` 설정
- **Google Gemini AI**: 뉴스 통합 처리용 AI 모델 (gemini-2.5-pro-preview-03-25)
- **성능 모니터링**: 밀리초 단위 실행 시간 측정

## 뉴스캐스트 스크립트 생성 시스템 (TypeScript)

### Google TTS Chirp 음성 관리
- **tts-voices.json**: 8개 프리미엄 Chirp 모델 + 한국인 이름 매핑
- **성별 균형 보장**: 반드시 남성 1명 + 여성 1명 진행자 구성
- **자동 음성 할당**: 기본 진행자 김민준(남성), 이서연(여성)
- **순서 유연성**: 남자→여자 또는 여자→남자 순서 모두 가능

### 프로그램 설정
- **프로그램명**: "오늘의 뉴스 브리핑"
- **진행 형식**: 두 명의 진행자가 대화하는 뉴스캐스트
- **스크립트 길이**: 3-4분 분량 (약 3,000자)
- **AI 모델**: gemini-2.5-pro-preview-03-25

### consolidate-news.ts 주요 기능
1. **뉴스 데이터 로드**: `news/` 폴더에서 개별 뉴스 JSON 파일들 읽기
2. **AI 통합 처리**: Google Gemini를 사용하여 같은 주제의 여러 뉴스를 하나로 정리
3. **결과 저장**: 
   - `news.json`: 통합된 뉴스 데이터 (JSON 형태)
   - `news.txt`: 통합된 뉴스 텍스트 (읽기 쉬운 형태)
4. **성능 측정**: 각 단계별 처리 시간 측정 및 출력

### generate-newscast-script.ts 주요 기능
1. **TTS 음성 설정 로드**: `tts-voices.json`에서 Chirp 모델 정보 읽기
2. **성별 균형 검증**: 진행자 2명이 남성 1명 + 여성 1명인지 자동 확인
3. **AI 스크립트 생성**: Google Gemini로 대화형 뉴스캐스트 스크립트 작성
4. **결과 저장**:
   - `newscast-script.json`: 구조화된 스크립트 데이터 (TTS 음성 정보 포함)
   - `newscast-script.txt`: 읽기 쉬운 스크립트 형태
5. **성능 측정**: AI 처리 시간 및 전체 실행 시간 측정

### 실행 방법
```bash
# Node.js 24 네이티브 TypeScript 실행
node --experimental-transform-types consolidate-news.ts [bigkinds-folder] [topic-number]

# 예시
node --experimental-transform-types consolidate-news.ts bigkinds/2025-06-20T23:19:18.489131 1
```

### 통합 뉴스 데이터 구조
```json
{
  "topic": "주제 제목",
  "total_articles": 59,
  "sources": ["언론사1", "언론사2", ...],
  "consolidated_content": "AI로 통합 정리된 뉴스 내용",
  "original_timestamp": "원본 추출 시간",
  "consolidation_timestamp": "통합 처리 시간"
}
```

## 성능 모니터링
모든 파이프라인 단계에서 실행 시간을 측정하여 성능 최적화에 활용:

### Python 스크립트 타이밍
- **bigkinds_topic_list.py**: 폴더 생성, 데이터 추출, 파일 저장 각 단계별 시간
- **get_news_list.py**: API 호출, 데이터 추출, 저장 각 단계별 시간  
- **get_news_details.py**: 전체 파이프라인 및 개별 뉴스 처리 시간

### TypeScript 스크립트 타이밍
- **consolidate-news.ts**: 파일 로드, AI 처리, 결과 저장 각 단계별 시간

## 확장 가능성
1. **✅ 개별 뉴스 상세 정보**: `news_ids`를 이용한 개별 기사 내용 추출 (구현 완료)
2. **✅ 뉴스 통합 시스템**: AI를 활용한 같은 주제 뉴스들의 통합 정리 (구현 완료)
3. **✅ 성능 모니터링**: 전체 파이프라인 실행 시간 측정 (구현 완료)
4. **카테고리 분류**: 뉴스 주제별 자동 분류
5. **트렌드 분석**: 시간대별 주제 변화 추적
6. **다중 언어 지원**: 영어 번역 및 다국어 처리
7. **AI 뉴스 캐스트**: 추출된 데이터를 활용한 TTS 뉴스 생성

## 사용 예시
```bash
cd tests/claude-code/

# 1단계: 주제 목록 추출 (빅카인드 메인 페이지에서 10개 주제)
python bigkinds_topic_list.py

# 2단계: 뉴스 목록 추출 
# 상위 3개 주제의 뉴스 목록 가져오기
python get_news_list.py bigkinds-2025-06-20T22:00:54.999029

# 특정 순위 주제만 처리
python get_news_list.py bigkinds-2025-06-20T22:00:54.999029 1

# 모든 10개 주제 처리 (수동으로 각각 실행)
for i in {1..10}; do python get_news_list.py bigkinds-folder $i; done

# 3단계: 개별 뉴스 상세 정보 추출
# 전체 파이프라인 자동 실행 (주제 → 뉴스 목록 → 첫 번째 주제 상세)
python get_news_details.py

# 특정 주제의 뉴스 상세 정보만 추출
python get_news_details.py bigkinds-2025-06-20T22:00:54.999029 1

# 4단계: 뉴스 통합 및 정리 (TypeScript + AI)
# 첫 번째 주제의 뉴스들을 AI로 통합 정리
node --experimental-transform-types consolidate-news.ts bigkinds/2025-06-20T23:19:18.489131 1

# 5단계: 뉴스캐스트 스크립트 생성 (TypeScript + AI)
# 통합된 뉴스를 기반으로 대화형 뉴스캐스트 스크립트 생성
node --experimental-transform-types generate-newscast-script.ts bigkinds/2025-06-20T23:19:18.489131 1

# 6단계: 개별 대사 라인 TTS 음성 생성 (Google Cloud TTS)
# 스크립트의 각 대사를 개별 MP3 파일로 생성
node --experimental-transform-types generate-newscast-audio.ts bigkinds/2025-06-20T23:19:18.489131 1

# 7단계: 완성된 뉴스캐스트 오디오 생성 (FFmpeg 병합)
# 개별 음성 파일들을 하나의 완성된 오디오로 병합
node --experimental-transform-types merge-newscast-audio.ts bigkinds/2025-06-20T23:19:18.489131 1
```

## 주의사항
- 빅카인드 사이트 구조 변경 시 XPath 선택자 업데이트 필요
- 과도한 요청 방지를 위한 적절한 딜레이 고려
- 저작권 및 이용약관 준수 필요

## Google Cloud TTS 설정 (6-7단계 필수)
```bash
# 1. Google Cloud 프로젝트 생성 및 Text-to-Speech API 활성화
# 2. 서비스 계정 키 생성 (JSON 파일)
# 3. 환경변수 설정
export GOOGLE_APPLICATION_CREDENTIALS="/path/to/service-account-key.json"

# 4. FFmpeg 설치 (오디오 병합용)
# Ubuntu/Debian:
sudo apt update && sudo apt install ffmpeg
# macOS:
brew install ffmpeg
# Windows: https://ffmpeg.org/download.html

# 5. Node.js 패키지 설치
npm install @google-cloud/text-to-speech
```