#!/usr/bin/env node

import { Command } from 'commander';
import { readFile, writeFile, mkdir } from 'fs/promises';
import { dirname, join, basename, relative } from 'path';
import { existsSync } from 'fs';
import { promisify } from 'util';
import { exec } from 'child_process';
import ffmpeg from '@ffmpeg-installer/ffmpeg';
import { generateNewscastScript } from './generate-newscast-script.ts';
import { generateNewscastAudio } from './generate-newscast-audio.ts';
import { loadPrompt, loadTTSHosts } from './utils.ts';
import type { GeneratedNews, NewscastOutput } from './types.ts';

const execAsync = promisify(exec);

interface ScriptCommandOptions {
  inputFile: string;
  outputFile: string;
  printFormat?: 'json' | 'text';
  printLogFile?: string;
}

interface AudioCommandOptions {
  inputFile: string;
  outputDir: string;
  printFormat?: 'json' | 'text';
  printLogFile?: string;
}

async function generateScriptToFiles({
  inputFile,
  outputFile,
  printFormat = 'text',
  printLogFile,
}: ScriptCommandOptions) {
  const apiKey = process.env.GOOGLE_GEN_AI_API_KEY;

  if (!apiKey) {
    throw new Error('GOOGLE_GEN_AI_API_KEY environment variable is required');
  }

  const [newsContent, promptTemplate, voices] = await Promise.all([
    readFile(inputFile, 'utf-8'),
    loadPrompt(),
    loadTTSHosts(),
  ]);

  const newsData = JSON.parse(newsContent) as GeneratedNews;
  const result = await generateNewscastScript({
    news: newsData,
    promptTemplate,
    voices,
    apiKey,
  });

  await mkdir(dirname(outputFile), { recursive: true });
  await writeFile(outputFile, JSON.stringify(result.output, null, 2), 'utf-8');

  const markdownFile = outputFile.endsWith('.json')
    ? outputFile.replace(/\.json$/i, '.md')
    : `${outputFile}.md`;
  await writeFile(markdownFile, result.markdown, 'utf-8');

  const logPayload = {
    timestamp: result.stats.completedAt,
    started_at: result.stats.startedAt,
    elapsed_ms: result.stats.elapsedMs,
    script_lines: result.stats.scriptLines,
    hosts: `${result.stats.hosts.host1}, ${result.stats.hosts.host2}`,
    input_file: inputFile,
    output_file: outputFile,
    markdown_file: markdownFile,
  };

  if (printFormat === 'json') {
    console.log(JSON.stringify(logPayload, null, 2));
  } else {
    console.log(`‚úÖ Generated newscast script: ${outputFile}`);
    console.log(`üìù Script lines: ${result.stats.scriptLines}`);
    console.log(`üéôÔ∏è Hosts: ${result.stats.hosts.host1}, ${result.stats.hosts.host2}`);
    console.log(`‚è±Ô∏è Elapsed: ${(result.stats.elapsedMs / 1000).toFixed(2)}s`);
  }

  if (printLogFile) {
    await mkdir(dirname(printLogFile), { recursive: true });
    await writeFile(printLogFile, JSON.stringify(logPayload, null, 2), 'utf-8');
  }

  return { markdownFile };
}

async function getAudioDuration(filePath: string): Promise<number> {
  try {
    const ffmpegPath = ffmpeg.path;
    const ffprobePath = ffmpegPath.replace('ffmpeg', 'ffprobe');
    const { stdout } = await execAsync(`"${ffprobePath}" -v quiet -show_entries format=duration -of csv=p=0 "${filePath}"`);
    return parseFloat(stdout.trim());
  } catch (error) {
    // ffprobe Ïã§Ìå® Ïãú ÏãúÏä§ÌÖú ffprobe ÏãúÎèÑ
    try {
      const { stdout } = await execAsync(`ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${filePath}"`);
      return parseFloat(stdout.trim());
    } catch (systemError) {
      console.warn(`   ‚ö†Ô∏è  Ïò§ÎîîÏò§ Í∏∏Ïù¥ Ï∏°Ï†ï Ïã§Ìå®: ${error}`);
      return 0;
    }
  }
}

export async function generateAudioToFiles({
  inputFile,
  outputDir,
  printFormat = 'text',
  printLogFile,
}: AudioCommandOptions) {
  const startTime = Date.now();

  // Google Cloud API ÌÇ§ ÌôïÏù∏
  const apiKey = process.env.GOOGLE_CLOUD_API_KEY;
  if (!apiKey) {
    throw new Error('GOOGLE_CLOUD_API_KEY environment variable is required');
  }

  // ÏûÖÎ†• ÌååÏùº ÌôïÏù∏
  if (!existsSync(inputFile)) {
    throw new Error(`Input file does not exist: ${inputFile}`);
  }

  // Ïä§ÌÅ¨Î¶ΩÌä∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const scriptContent = await readFile(inputFile, 'utf-8');
  const newscastData: NewscastOutput = JSON.parse(scriptContent);

  // Ïò§ÎîîÏò§ ÏÉùÏÑ±
  const result = await generateNewscastAudio({
    newscastData,
    apiKey,
  });

  // Ïò§ÎîîÏò§ Ìè¥Îçî ÏÉùÏÑ±
  const audioFolderPath = join(outputDir, 'audio');
  await mkdir(audioFolderPath, { recursive: true });

  console.log('üéôÔ∏è Îâ¥Ïä§Ï∫êÏä§Ìä∏ Ïò§ÎîîÏò§ ÏÉùÏÑ± ÏãúÏûë...');
  console.log(`   üìä Ï¥ù Ïä§ÌÅ¨Î¶ΩÌä∏ ÎùºÏù∏: ${newscastData.script.length}Í∞ú`);
  console.log(`   üë• ÏßÑÌñâÏûê: ${newscastData.hosts.host1.name} (${newscastData.hosts.host1.voice_model}), ${newscastData.hosts.host2.name} (${newscastData.hosts.host2.voice_model})`);

  console.log('\nüéµ Í∞úÎ≥Ñ Ïä§ÌÅ¨Î¶ΩÌä∏ ÎùºÏù∏ Ïò§ÎîîÏò§ Ï†ÄÏû• Ï§ë...');

  // Ïò§ÎîîÏò§ ÌååÏùº Ï†ÄÏû• Î∞è duration Ï∏°Ï†ï
  for (const audioFile of result.audioFiles) {
    const audioFilePath = join(audioFolderPath, audioFile.fileName);
    await writeFile(audioFilePath, audioFile.audioContent);

    // duration Ï∏°Ï†ï Î∞è ÏóÖÎç∞Ïù¥Ìä∏
    const duration = await getAudioDuration(audioFilePath);
    const audioFileInfo = result.audioOutput.audio_files.find(f => f.sequence === audioFile.sequence);
    if (audioFileInfo) {
      audioFileInfo.duration_seconds = duration;
    }

    console.log(`   ‚úÖ Ï†ÄÏû• ÏôÑÎ£å: ${basename(audioFilePath)} (${duration.toFixed(2)}s)`);
    console.log(`   üé§ ÏùåÏÑ± ÏÉùÏÑ± Ï§ë: ${audioFile.sequence.toString().padStart(3, '0')}. [${audioFile.scriptLine.name ?? audioFile.scriptLine.role}]`);
  }

  // Ïò§ÎîîÏò§ ÌååÏùº Î™©Î°ù Ï†ÄÏû•
  const audioListPath = join(audioFolderPath, 'audio-files.json');
  await writeFile(audioListPath, JSON.stringify(result.audioOutput, null, 2), 'utf-8');

  const endTime = Date.now();
  const elapsedSeconds = ((endTime - startTime) / 1000).toFixed(2);

  // Î°úÍ∑∏ Ï∂úÎ†• ÏÉùÏÑ±
  const logOutput = {
    timestamp: new Date().toISOString(),
    'elapsed-time': `${elapsedSeconds}s`,
    'dialogue-lines': result.stats.dialogueCount,
    'music-lines': result.stats.musicCount,
    'audio-files-generated': result.stats.successCount,
    'files-skipped': result.stats.skipCount,
    'files-failed': result.stats.failCount,
    'success-rate': result.stats.successRate,
    'output-dir': audioFolderPath,
  };

  // Î°úÍ∑∏ Ï∂úÎ†•
  if (printFormat === 'json') {
    console.log(JSON.stringify(logOutput, null, 2));
  } else {
    console.log(`\n‚úÖ Îâ¥Ïä§Ï∫êÏä§Ìä∏ Ïò§ÎîîÏò§ ÏÉùÏÑ± ÏôÑÎ£å!`);
    console.log(`   üé¨ ÌîÑÎ°úÍ∑∏Îû®: ${newscastData.program_name}`);
    console.log(`   üìä ÎåÄÌôî ÎùºÏù∏: ${result.stats.dialogueCount}Í∞ú, ÏùåÏïÖ Íµ¨Í∞Ñ: ${result.stats.musicCount}Í∞ú`);
    console.log(`   üé§ TTS ÏÉùÏÑ±: ${result.stats.successCount}Í∞ú ÏÑ±Í≥µ, ${result.stats.failCount}Í∞ú Ïã§Ìå®`);
    console.log(`   üéµ ÏùåÏïÖ Íµ¨Í∞Ñ: ${result.stats.skipCount}Í∞ú Ïä§ÌÇµ`);
    console.log(`   üìà TTS ÏÑ±Í≥µÎ•†: ${result.stats.successRate}`);
    console.log(`   ‚è±Ô∏è  Ïò§ÎîîÏò§ ÏÉùÏÑ± ÏãúÍ∞Ñ: ${result.stats.elapsedMs}ms`);
    console.log(`   üïê Ï†ÑÏ≤¥ ÏÜåÏöî ÏãúÍ∞Ñ: ${elapsedSeconds}s`);
    console.log(`   üìÅ Ï†ÄÏû• ÏúÑÏπò: ${audioFolderPath}`);

    if (result.stats.failCount > 0) {
      console.warn(`\n‚ö†Ô∏è  ${result.stats.failCount}Í∞ú Ïä§ÌÅ¨Î¶ΩÌä∏ ÎùºÏù∏ ÏÉùÏÑ± Ïã§Ìå®. Google Cloud TTS API ÏÑ§Ï†ïÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.`);
    }

    if (result.stats.skipCount > 0) {
      console.log(`\nüí° ${result.stats.skipCount}Í∞ú ÏùåÏïÖ Íµ¨Í∞ÑÏùÄ Î≥ÑÎèÑÎ°ú ÏùåÏïÖ ÌååÏùºÏùÑ Ï§ÄÎπÑÌïòÏó¨ Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî:`);
      newscastData.script
        .filter(line => line.type !== 'dialogue')
        .forEach((line) => {
          const sequence = newscastData.script.indexOf(line) + 1;
          const fileName = `${sequence.toString().padStart(3, '0')}-${line.type}.mp3`;
          console.log(`   üéµ ${fileName}: ${line.content}`);
        });
    }
  }

  // Î°úÍ∑∏ ÌååÏùº Ï†ÄÏû•
  if (printLogFile) {
    await mkdir(dirname(printLogFile), { recursive: true });
    await writeFile(printLogFile, JSON.stringify(logOutput, null, 2));
  }

  return { audioFolderPath, audioListPath };
}

const program = new Command();

program
  .name('newscast-generator')
  .description('AI-powered newscast script and audio generator with Google TTS integration')
  .version('1.0.0');

// Script Generation Command
program
  .command('script')
  .description('Generate newscast script from consolidated news')
  .requiredOption('-i, --input-file <path>', 'Input JSON file containing consolidated news')
  .requiredOption('-o, --output-file <path>', 'Output file path for generated script')
  .option('-f, --print-format <format>', 'Output format (json|text)', 'text')
  .option('-l, --print-log-file <path>', 'File to write JSON log output')
  .action(async (options) => {
    try {
      const { inputFile, outputFile, printFormat, printLogFile } = options;
      await generateScriptToFiles({ inputFile, outputFile, printFormat, printLogFile });
    } catch (error) {
      console.error('‚ùå Error generating script:', error instanceof Error ? error.message : error);
      process.exit(1);
    }
  });

// Audio Generation Command
program
  .command('audio')
  .description('Generate TTS audio from newscast script')
  .requiredOption('-i, --input-file <path>', 'Input JSON file containing newscast script')
  .requiredOption('-o, --output-dir <path>', 'Output directory for generated audio files')
  .option('-f, --print-format <format>', 'Output format (json|text)', 'text')
  .option('-l, --print-log-file <path>', 'File to write JSON log output')
  .action(async (options) => {
    try {
      const { inputFile, outputDir, printFormat, printLogFile } = options;
      await generateAudioToFiles({ inputFile, outputDir, printFormat, printLogFile });
    } catch (error) {
      console.error('‚ùå Error generating audio:', error instanceof Error ? error.message : error);
      process.exit(1);
    }
  });

program.parse();
