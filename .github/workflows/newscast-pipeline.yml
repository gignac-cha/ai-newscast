name: AI Newscast Pipeline

on:
  schedule:
    - cron: '5 0 * * *'  # UTC 00:05 (KST 09:05) - daily execution
  workflow_dispatch:     # Manual trigger support

env:
  NODE_VERSION: '24'

jobs:
  # Job 1: Crawl Topics (10 topics + news lists)
  crawl-topics:
    runs-on: ubuntu-latest
    outputs:
      newscast-id: ${{ steps.topics.outputs.newscast-id }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Crawl topics and news lists
        id: topics
        run: |
          pnpm run:crawler:news-topics -- --output output

          # Extract newscast-id and set as output
          NEWSCAST_ID=$(ls -t output | head -n 1)
          echo "newscast-id=${NEWSCAST_ID}" >> $GITHUB_OUTPUT
          echo "NEWSCAST_ID=${NEWSCAST_ID}" >> $GITHUB_ENV
          echo "‚úÖ Crawled topics for newscast: ${NEWSCAST_ID}"

      - name: Upload topics data
        uses: actions/upload-artifact@v4
        with:
          name: topics-data
          path: output/${{ steps.topics.outputs.newscast-id }}/
          retention-days: 7

  # Job 2: Crawl News Details (parallel: 10 topics)
  crawl-details-matrix:
    needs: [crawl-topics]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        topic: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      max-parallel: 10
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download topics data
        uses: actions/download-artifact@v4
        with:
          name: topics-data
          path: output/${{ needs.crawl-topics.outputs.newscast-id }}/

      - name: Crawl news details for topic-${{ matrix.topic }}
        run: |
          TOPIC_INDEX=${{ matrix.topic }}
          TOPIC_INDEX_STRING=$(printf "%02d" $TOPIC_INDEX)
          NEWSCAST_ID=${{ needs.crawl-topics.outputs.newscast-id }}

          echo "üì∞ Crawling news details for topic-${TOPIC_INDEX_STRING}"

          # Extract news IDs from news-list.json
          NEWS_IDS=$(cat output/${NEWSCAST_ID}/topic-${TOPIC_INDEX_STRING}/news-list.json | \
            jq -r '.newsIDs | join(",")')

          # Crawl news details (sequential within topic)
          pnpm run:crawler:news-details -- \
            --news-ids "${NEWS_IDS}" \
            --output output/${NEWSCAST_ID}/topic-${TOPIC_INDEX_STRING} \
            --topic-index ${TOPIC_INDEX}

          echo "‚úÖ Completed news details for topic-${TOPIC_INDEX_STRING}"

      - name: Upload topic-${{ matrix.topic }} details
        uses: actions/upload-artifact@v4
        with:
          name: topic-${{ matrix.topic }}-details
          path: output/${{ needs.crawl-topics.outputs.newscast-id }}/topic-${{ matrix.topic }}/
          retention-days: 7

  # Job 3: Generate Consolidated News (parallel: 10 topics)
  generate-news-matrix:
    needs: [crawl-topics, crawl-details-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        topic: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      max-parallel: 10
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download topic-${{ matrix.topic }} details
        uses: actions/download-artifact@v4
        with:
          name: topic-${{ matrix.topic }}-details
          path: output/${{ needs.crawl-topics.outputs.newscast-id }}/topic-${{ matrix.topic }}/

      - name: Generate consolidated news for topic-${{ matrix.topic }}
        env:
          GOOGLE_GEN_AI_API_KEY: ${{ secrets.GOOGLE_GEN_AI_API_KEY }}
        run: |
          TOPIC_INDEX=${{ matrix.topic }}
          TOPIC_INDEX_STRING=$(printf "%02d" $TOPIC_INDEX)
          NEWSCAST_ID=${{ needs.crawl-topics.outputs.newscast-id }}

          echo "ü§ñ Generating consolidated news for topic-${TOPIC_INDEX_STRING}"

          pnpm run:generator:news -- \
            --input-folder output/${NEWSCAST_ID}/topic-${TOPIC_INDEX_STRING}/news \
            --output-file output/${NEWSCAST_ID}/topic-${TOPIC_INDEX_STRING}/news.json

          echo "‚úÖ Completed news generation for topic-${TOPIC_INDEX_STRING}"

      - name: Upload topic-${{ matrix.topic }} news
        uses: actions/upload-artifact@v4
        with:
          name: topic-${{ matrix.topic }}-news
          path: output/${{ needs.crawl-topics.outputs.newscast-id }}/topic-${{ matrix.topic }}/
          retention-days: 7

  # Job 4: Generate Newscast Script (parallel: 10 topics)
  generate-script-matrix:
    needs: [crawl-topics, generate-news-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        topic: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      max-parallel: 10
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download topic-${{ matrix.topic }} news
        uses: actions/download-artifact@v4
        with:
          name: topic-${{ matrix.topic }}-news
          path: output/${{ needs.crawl-topics.outputs.newscast-id }}/topic-${{ matrix.topic }}/

      - name: Generate newscast script for topic-${{ matrix.topic }}
        env:
          GOOGLE_GEN_AI_API_KEY: ${{ secrets.GOOGLE_GEN_AI_API_KEY }}
        run: |
          TOPIC_INDEX=${{ matrix.topic }}
          TOPIC_INDEX_STRING=$(printf "%02d" $TOPIC_INDEX)
          NEWSCAST_ID=${{ needs.crawl-topics.outputs.newscast-id }}

          echo "üìù Generating newscast script for topic-${TOPIC_INDEX_STRING}"

          pnpm run:generator:newscast-script -- \
            --input-file output/${NEWSCAST_ID}/topic-${TOPIC_INDEX_STRING}/news.json \
            --output-file output/${NEWSCAST_ID}/topic-${TOPIC_INDEX_STRING}/newscast-script.json

          echo "‚úÖ Completed script generation for topic-${TOPIC_INDEX_STRING}"

      - name: Upload topic-${{ matrix.topic }} script
        uses: actions/upload-artifact@v4
        with:
          name: topic-${{ matrix.topic }}-script
          path: output/${{ needs.crawl-topics.outputs.newscast-id }}/topic-${{ matrix.topic }}/
          retention-days: 7

  # Job 5: Generate TTS Audio (parallel: 10 topics)
  generate-audio-matrix:
    needs: [crawl-topics, generate-script-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        topic: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      max-parallel: 10
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download topic-${{ matrix.topic }} script
        uses: actions/download-artifact@v4
        with:
          name: topic-${{ matrix.topic }}-script
          path: output/${{ needs.crawl-topics.outputs.newscast-id }}/topic-${{ matrix.topic }}/

      - name: Generate TTS audio for topic-${{ matrix.topic }}
        env:
          GOOGLE_CLOUD_API_KEY: ${{ secrets.GOOGLE_CLOUD_API_KEY }}
        run: |
          TOPIC_INDEX=${{ matrix.topic }}
          TOPIC_INDEX_STRING=$(printf "%02d" $TOPIC_INDEX)
          NEWSCAST_ID=${{ needs.crawl-topics.outputs.newscast-id }}

          echo "üéôÔ∏è Generating TTS audio for topic-${TOPIC_INDEX_STRING}"

          pnpm run:generator:newscast-audio -- \
            --input-file output/${NEWSCAST_ID}/topic-${TOPIC_INDEX_STRING}/newscast-script.json \
            --output-dir output/${NEWSCAST_ID}/topic-${TOPIC_INDEX_STRING}

          echo "‚úÖ Completed audio generation for topic-${TOPIC_INDEX_STRING}"

      - name: Upload topic-${{ matrix.topic }} audio
        uses: actions/upload-artifact@v4
        with:
          name: topic-${{ matrix.topic }}-audio
          path: output/${{ needs.crawl-topics.outputs.newscast-id }}/topic-${{ matrix.topic }}/
          retention-days: 7

  # Job 6: Merge Newscast Audio (parallel: 10 topics)
  merge-newscast-matrix:
    needs: [crawl-topics, generate-audio-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        topic: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      max-parallel: 10
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download topic-${{ matrix.topic }} audio
        uses: actions/download-artifact@v4
        with:
          name: topic-${{ matrix.topic }}-audio
          path: output/${{ needs.crawl-topics.outputs.newscast-id }}/topic-${{ matrix.topic }}/

      - name: Merge audio files for topic-${{ matrix.topic }}
        run: |
          TOPIC_INDEX=${{ matrix.topic }}
          TOPIC_INDEX_STRING=$(printf "%02d" $TOPIC_INDEX)
          NEWSCAST_ID=${{ needs.crawl-topics.outputs.newscast-id }}

          echo "üéµ Merging audio files for topic-${TOPIC_INDEX_STRING}"

          pnpm run:generator:newscast -- \
            --input-dir output/${NEWSCAST_ID}/topic-${TOPIC_INDEX_STRING}

          echo "‚úÖ Completed audio merge for topic-${TOPIC_INDEX_STRING}"

      - name: Upload topic-${{ matrix.topic }} final newscast
        uses: actions/upload-artifact@v4
        with:
          name: topic-${{ matrix.topic }}-final
          path: output/${{ needs.crawl-topics.outputs.newscast-id }}/topic-${{ matrix.topic }}/
          retention-days: 7

  # Job 7: Upload to R2 (parallel: 10 topics)
  upload-to-r2-matrix:
    needs: [crawl-topics, merge-newscast-matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        topic: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      max-parallel: 10
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download topic-${{ matrix.topic }} final newscast
        uses: actions/download-artifact@v4
        with:
          name: topic-${{ matrix.topic }}-final
          path: output/${{ needs.crawl-topics.outputs.newscast-id }}/topic-${{ matrix.topic }}/

      - name: Upload topic-${{ matrix.topic }} to R2
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
          CLOUDFLARE_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}
        run: |
          TOPIC_INDEX=${{ matrix.topic }}
          TOPIC_INDEX_STRING=$(printf "%02d" $TOPIC_INDEX)
          NEWSCAST_ID=${{ needs.crawl-topics.outputs.newscast-id }}

          echo "üì§ Uploading topic-${TOPIC_INDEX_STRING} to R2"

          pnpm run uploader:upload \
            --input-dir output/${NEWSCAST_ID}/topic-${TOPIC_INDEX_STRING} \
            --newscast-id ${NEWSCAST_ID} \
            --topic-index ${TOPIC_INDEX} \
            --test

          echo "‚úÖ Completed R2 upload for topic-${TOPIC_INDEX_STRING}"

  # Job 8: Update latest-newscast-id (single job)
  update-latest-id:
    needs: [crawl-topics, upload-to-r2-matrix]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Update latest-newscast-id
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_ACCESS_KEY_ID }}
          CLOUDFLARE_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_SECRET_ACCESS_KEY }}
        run: |
          NEWSCAST_ID=${{ needs.crawl-topics.outputs.newscast-id }}

          echo "üîÑ Updating latest-newscast-id to ${NEWSCAST_ID}"

          # Update latest-newscast-id (R2 or KV)
          pnpm --filter @ai-newscast/newscast-latest-id run update:remote \
            --newscast-id ${NEWSCAST_ID}

          echo "‚úÖ Latest newscast ID updated"

      - name: Generate workflow summary
        run: |
          echo "## ‚úÖ Newscast Pipeline Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Newscast ID**: \`${{ needs.crawl-topics.outputs.newscast-id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Topics processed**: 10" >> $GITHUB_STEP_SUMMARY
          echo "**Upload location**: \`tests/newscasts/${{ needs.crawl-topics.outputs.newscast-id }}/\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Topic crawling completed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ News details crawled (10 topics in parallel)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Consolidated news generated (10 topics in parallel)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Newscast scripts generated (10 topics in parallel)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ TTS audio generated (10 topics in parallel)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Audio files merged (10 topics in parallel)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Files uploaded to R2 (10 topics in parallel)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Latest newscast ID updated" >> $GITHUB_STEP_SUMMARY
